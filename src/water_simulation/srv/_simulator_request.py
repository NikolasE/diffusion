"""autogenerated by genmsg_py from simulator_requestRequest.msg. Do not edit."""
import roslib.message
import struct

import std_msgs.msg
import sensor_msgs.msg

class simulator_requestRequest(roslib.message.Message):
  _md5sum = "581c53b8ce63aae5b5529e624448eb67"
  _type = "water_simulation/simulator_requestRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """sensor_msgs/Image land_img
int32 id
bool reset_water

================================================================================
MSG: sensor_msgs/Image
# This message contains an uncompressed image
# (0, 0) is at top-left corner of image
#

Header header        # Header timestamp should be acquisition time of image
                     # Header frame_id should be optical frame of camera
                     # origin of frame should be optical center of cameara
                     # +x should point to the right in the image
                     # +y should point down in the image
                     # +z should point into to plane of the image
                     # If the frame_id here and the frame_id of the CameraInfo
                     # message associated with the image conflict
                     # the behavior is undefined

uint32 height         # image height, that is, number of rows
uint32 width          # image width, that is, number of columns

# The legal values for encoding are in file src/image_encodings.cpp
# If you want to standardize a new string format, join
# ros-users@lists.sourceforge.net and send an email proposing a new encoding.

string encoding       # Encoding of pixels -- channel meaning, ordering, size
                      # taken from the list of strings in src/image_encodings.cpp

uint8 is_bigendian    # is this data bigendian?
uint32 step           # Full row length in bytes
uint8[] data          # actual matrix data, size is (step * rows)

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.secs: seconds (stamp_secs) since epoch
# * stamp.nsecs: nanoseconds since stamp_secs
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

"""
  __slots__ = ['land_img','id','reset_water']
  _slot_types = ['sensor_msgs/Image','int32','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.
    
    The available fields are:
       land_img,id,reset_water
    
    @param args: complete set of field values, in .msg order
    @param kwds: use keyword arguments corresponding to message field names
    to set specific fields. 
    """
    if args or kwds:
      super(simulator_requestRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.land_img is None:
        self.land_img = sensor_msgs.msg.Image()
      if self.id is None:
        self.id = 0
      if self.reset_water is None:
        self.reset_water = False
    else:
      self.land_img = sensor_msgs.msg.Image()
      self.id = 0
      self.reset_water = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    @param buff: buffer
    @type  buff: StringIO
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.land_img.header.seq, _x.land_img.header.stamp.secs, _x.land_img.header.stamp.nsecs))
      _x = self.land_img.header.frame_id
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2I.pack(_x.land_img.height, _x.land_img.width))
      _x = self.land_img.encoding
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_BI.pack(_x.land_img.is_bigendian, _x.land_img.step))
      _x = self.land_img.data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_iB.pack(_x.id, _x.reset_water))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    @param str: byte array of serialized message
    @type  str: str
    """
    try:
      if self.land_img is None:
        self.land_img = sensor_msgs.msg.Image()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.land_img.header.seq, _x.land_img.header.stamp.secs, _x.land_img.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.land_img.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.land_img.height, _x.land_img.width,) = _struct_2I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.land_img.encoding = str[start:end]
      _x = self
      start = end
      end += 5
      (_x.land_img.is_bigendian, _x.land_img.step,) = _struct_BI.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.land_img.data = str[start:end]
      _x = self
      start = end
      end += 5
      (_x.id, _x.reset_water,) = _struct_iB.unpack(str[start:end])
      self.reset_water = bool(self.reset_water)
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    @param buff: buffer
    @type  buff: StringIO
    @param numpy: numpy python module
    @type  numpy module
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.land_img.header.seq, _x.land_img.header.stamp.secs, _x.land_img.header.stamp.nsecs))
      _x = self.land_img.header.frame_id
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2I.pack(_x.land_img.height, _x.land_img.width))
      _x = self.land_img.encoding
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_BI.pack(_x.land_img.is_bigendian, _x.land_img.step))
      _x = self.land_img.data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_iB.pack(_x.id, _x.reset_water))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    @param str: byte array of serialized message
    @type  str: str
    @param numpy: numpy python module
    @type  numpy: module
    """
    try:
      if self.land_img is None:
        self.land_img = sensor_msgs.msg.Image()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.land_img.header.seq, _x.land_img.header.stamp.secs, _x.land_img.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.land_img.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.land_img.height, _x.land_img.width,) = _struct_2I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.land_img.encoding = str[start:end]
      _x = self
      start = end
      end += 5
      (_x.land_img.is_bigendian, _x.land_img.step,) = _struct_BI.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.land_img.data = str[start:end]
      _x = self
      start = end
      end += 5
      (_x.id, _x.reset_water,) = _struct_iB.unpack(str[start:end])
      self.reset_water = bool(self.reset_water)
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

_struct_I = roslib.message.struct_I
_struct_3I = struct.Struct("<3I")
_struct_iB = struct.Struct("<iB")
_struct_2I = struct.Struct("<2I")
_struct_BI = struct.Struct("<BI")
"""autogenerated by genmsg_py from simulator_requestResponse.msg. Do not edit."""
import roslib.message
import struct


class simulator_requestResponse(roslib.message.Message):
  _md5sum = "a11ec58c43badf602c0e13a7fc4f2fb8"
  _type = "water_simulation/simulator_requestResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int64 id_cpy
int32 width
int32 height


"""
  __slots__ = ['id_cpy','width','height']
  _slot_types = ['int64','int32','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.
    
    The available fields are:
       id_cpy,width,height
    
    @param args: complete set of field values, in .msg order
    @param kwds: use keyword arguments corresponding to message field names
    to set specific fields. 
    """
    if args or kwds:
      super(simulator_requestResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.id_cpy is None:
        self.id_cpy = 0
      if self.width is None:
        self.width = 0
      if self.height is None:
        self.height = 0
    else:
      self.id_cpy = 0
      self.width = 0
      self.height = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    @param buff: buffer
    @type  buff: StringIO
    """
    try:
      _x = self
      buff.write(_struct_q2i.pack(_x.id_cpy, _x.width, _x.height))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    @param str: byte array of serialized message
    @type  str: str
    """
    try:
      end = 0
      _x = self
      start = end
      end += 16
      (_x.id_cpy, _x.width, _x.height,) = _struct_q2i.unpack(str[start:end])
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    @param buff: buffer
    @type  buff: StringIO
    @param numpy: numpy python module
    @type  numpy module
    """
    try:
      _x = self
      buff.write(_struct_q2i.pack(_x.id_cpy, _x.width, _x.height))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    @param str: byte array of serialized message
    @type  str: str
    @param numpy: numpy python module
    @type  numpy: module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 16
      (_x.id_cpy, _x.width, _x.height,) = _struct_q2i.unpack(str[start:end])
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

_struct_I = roslib.message.struct_I
_struct_q2i = struct.Struct("<q2i")
class simulator_request(roslib.message.ServiceDefinition):
  _type          = 'water_simulation/simulator_request'
  _md5sum = 'd3529bff8573bac0d3b6796602bcdfc9'
  _request_class  = simulator_requestRequest
  _response_class = simulator_requestResponse
